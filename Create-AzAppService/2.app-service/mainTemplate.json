{
    //Based on the following public ARM Template : https://github.com/Azure/azure-quickstart-templates/tree/master/101-function-premium-vnet-integration
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "env": {
            "type": "string",
            "allowedValues": [
                "prd",
                "dev"
            ],
            "metadata": {
                "description": "Webhelp environment for the Application."
            }
        },
        "additional_tags": {
            "type": "string",
            "defaultValue": "{}",
            "metadata": {
                "description": "Option Tags to apply on the resources in addition to it's Resource group tags, sample {\"env\":\"prd\"}"
            }
        },
        "additionalAppSettings": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional Web App Settings"
            }
        },
        "defaultAppSettings": {
            "type": "array",
            "defaultValue": [
                {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "~12"
                },
                {
                    "name": "WEBSITE_VNET_ROUTE_ALL", //Enable Regional VNet Integration, see: https://docs.microsoft.com/en-us/azure/app-service/web-sites-integrate-with-vnet#regional-vnet-integration
                    "value": "1"
                }
            ],
            "metadata": {
                "description": "Optional Web App Settings"
            }
        },
        "runtime": {
            "type": "string",
            "defaultValue": "node",
            "allowedValues": [
                "node",
                "dotnet",
                "java",
                "powershell",
                "python"
            ],
            "metadata": {
                "description": "The language worker runtime to load in the function app."
            }
        },
        "defaultFunAppSettings": {
            "type": "array",
            "defaultValue": [
                {
                    "name": "FUNCTIONS_EXTENSION_VERSION",
                    "value": "~3"
                },
                {
                    "name": "FUNCTIONS_WORKER_RUNTIME",
                    "value": "[parameters('runtime')]"
                }
            ],
            "metadata": {
                "description": "Optional Web App Settings"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "alwaysOn": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "(Optional) Should the app be loaded at all times? Defaults to false."
            }
        },
        "appKind": {
            "type": "string",
            "metadata": {
                "description": "The kind of the App Service."
            }
        },
        "appSuffix": {
            "type": "string",
            "defaultValue": "uiapp1",
            "metadata": {
                "description": "The Suffix of the Web app that you wish to create."
            }
        },
        "appName": {
            "type": "string",
            "defaultValue": "[concat(parameters('env'),'-',parameters('appSuffix'))]",
            "metadata": {
                "description": "The name of the Web app that you wish to create."
            }
        },
        "hostingPlanSubscriptionId": {
            "type": "string",
            "defaultValue": "null",
            "metadata": {
                "description": "The Subscription Id that contain the App Service Plan. If different that the App Service."
            }
        },
        "hostingPlanResourceGroupName": {
            "type": "string",
            "defaultValue": "[concat('infra-',parameters('infraEnv'),'-shared-rg1')]",
            "metadata": {
                "description": "The name of the Resource Group that contain the App Service Plan. If different that the App Service."
            }
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('appKind'), 'functionapp'), concat('mvp-',parameters('infraEnv'),'-shhp-funhostp1'), concat('mvp-',parameters('infraEnv'),'-shhp-apphostp1'))]",
            "metadata": {
                "description": "The name of the App Service Plan."
            }
        },
        "virtualNetworkResourceGroupName": {
            "type": "string",
            "defaultValue": "[concat('infra-',parameters('infraEnv'),'-shared-rg1')]",
            "metadata": {
                "description": "The Resource Group name of the vNet to use for the vNet integration."
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "[concat('infra-',parameters('infraEnv'),'-shared-vnet1')]",
            "metadata": {
                "description": "The Virtual Network name of the vNet to use for the vNet integration."
            }
        },
        "virtualNetworkSubnet": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('appKind'), 'functionapp'), 'shhp-funhostp1', 'shhp-apphostp1')]",
            "metadata": {
                "description": "The Subnet name of the vNet to use for the vNet integration."
            }
        },
        "infraEnv": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('env'), 'prd'), 'prd', 'noprd')]",
            "metadata": {
                "description": "The Subnet name of the vNet to use for the vNet integration."
            }
        },
        "allowedOrigins": {
            "type": "array",
            "defaultValue": []
        },
        "managedIdentity": {
            "type": "bool",
            "metadata": {
                "description": "Enable the Managed Identity of the Web App."
            },
            "defaultValue": false
        }
    },
    "variables": {
        "additional_tags": "[base64ToJson(base64(parameters('additional_tags')))]",
        "appSettings": "[if(equals(parameters('appKind'), 'functionapp'), union(parameters('defaultAppSettings'),parameters('defaultFunAppSettings'),parameters('additionalAppSettings')), union(parameters('defaultAppSettings'),parameters('additionalAppSettings')))]",
        "cors": {
            "allowedOrigins": "[parameters('allowedOrigins')]",
            "supportCredentials": false
        },
        "managedIdentity": {
            "type": "SystemAssigned"
        }
    },
    "functions": [
        {
            "namespace": "main",
            "members": {
                "getResource": {
                    "parameters": [
                        {
                            "name": "resourceType",
                            "type": "string"
                        },
                        {
                            "name": "otherSubscriptionId",
                            "type": "string"
                        },
                        {
                            "name": "otherResourceGroup",
                            "type": "string"
                        },
                        {
                            "name": "resourceName",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "object",
                        "value": {
                            "id": "[if(equals(parameters('otherSubscriptionId'), 'null'),if(equals(parameters('otherResourceGroup'), 'null'),resourceId(parameters('resourceType'), parameters('resourceName')),resourceId(parameters('otherResourceGroup'), parameters('resourceType'), parameters('resourceName'))),resourceId(parameters('otherSubscriptionId'), parameters('otherResourceGroup'), parameters('resourceType'), parameters('resourceName')))]"
                        }
                    }
                }
            }
        }
    ],
    "resources": [
        /******************************* Web app *********************************/
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[parameters('appName')]",
            "location": "[parameters('location')]",
            "tags": "[union(variables('additional_tags'),resourceGroup().tags)]",
            "kind": "[parameters('appKind')]",
            "identity": "[if(parameters('managedIdentity'), variables('managedIdentity'),json('null'))]",
            "properties": {
                "serverFarmId": "[concat(main.getResource('Microsoft.Web/serverfarms',parameters('hostingPlanSubscriptionId'), parameters('hostingPlanResourceGroupName'),parameters('hostingPlanName')).id)]",
                "siteConfig": {
                    "appSettings": "[variables('appSettings')]",
                    "http20Enabled": true,
                    "localMySqlEnabled": false,
                    "netFrameworkVersion": "v4.0",
                    "use32BitWorkerProcess": "false",
                    "scmType": "VSTSRM",
                    "alwaysOn": "[parameters('alwaysOn')]",
                    "cors": "[if(equals(length(parameters('allowedOrigins')),0), json('null'),variables('cors'))]"
                },
                "clientAffinityEnabled": "false"
            },
            "resources": [
                {
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "name": "virtualNetwork",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[concat(main.getResource('Microsoft.Network/virtualNetworks','null', parameters('virtualNetworkResourceGroupName'),parameters('virtualNetworkName')).id, '/subnets/',parameters('virtualNetworkSubnet'))]",
                        "swiftSupported": true
                    }
                }
            ]
        }
    ],
    "outputs": {
        "resourceID": {
            "type": "string",
            "value": "[resourceId('Microsoft.Web/sites', parameters('appName'))]"
        },
        "defaultUrl": {
            "value": "[concat('https://',reference(parameters('appName')).defaultHostName)]",
            "type": "string"
        }
    }
}